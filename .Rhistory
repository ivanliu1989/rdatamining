install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =600,height = 400))
print(G, "chart")
G2 <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =600,height = 400, region = "150"))
print(G2, "chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line, "chart")
require(rCharts)
require(rjson)
#get source from original example
#this is a JSON, so will need to translate
#this is complicated and unnecessary but feel I need to replicate
#for completeness
#expect most data to come straight from R
#in form of source, target, value
links <- matrix(unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$links
),ncol = 3, byrow = TRUE)
nodes <- unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$nodes
)
#convert to data.frame so souce and target can be character and value numeric
links <- data.frame(links)
colnames(links) <- c("source", "target", "value")
links$source <- sapply(links$source, FUN = function(x) {return(as.character(nodes[x+1]))}) #x+1 since js starts at 0
links$target <- sapply(links$target, FUN = function(x) {return(nodes[x+1])}) #x+1 since js starts at 0
#now we finally have the data in the form we need
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('.')
sankeyPlot$setTemplate(script = "layouts/chart.html")
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
links <- matrix(unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$links
),ncol = 3, byrow = TRUE)
nodes <- unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$nodes
)
links <- data.frame(links)
colnames(links) <- c("source", "target", "value")
links$source <- sapply(links$source, FUN = function(x) {return(as.character(nodes[x+1]))}) #x+1 since js starts at 0
links$target <- sapply(links$target, FUN = function(x) {return(nodes[x+1])}) #x+1 since js starts at 0
#now we finally have the data in the form we need
links$target
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('.')
sankeyPlot$setTemplate(script = "layouts/chart.html")
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('.')
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
require(rjson)
sankeyPlot <- rCharts$new()
sankeyPlot
require(rCharts)
require(rjson)
#get source from original example
#this is a JSON, so will need to translate
#this is complicated and unnecessary but feel I need to replicate
#for completeness
#expect most data to come straight from R
#in form of source, target, value
links <- matrix(unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$links
),ncol = 3, byrow = TRUE)
nodes <- unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$nodes
)
nodes <- unlist(
nodes
#in form of source, target, value
links
links <- data.frame(links)
colnames(links) <- c("source", "target", "value")
links
links$source <- sapply(links$source, FUN = function(x) {return(as.character(nodes[x+1]))}) #x+1 since js starts at 0
links
links$target <- sapply(links$target, FUN = function(x) {return(nodes[x+1])}) #x+1 since js starts at 0
links
sankeyPlot <- rCharts$new()
sankeyPlot
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('.')
sankeyPlot$setTemplate(script = "layouts/chart.html")
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
library(plotly)
intall.packages("plotly")
install_github("ropensci/plotly")
library("devtools")
install_github("ropensci/plotly")
library(plotly)
p <- plotly(username='R-Demo-Account', key='yu680v5eii')
trace1 <- list(
x = c(1, 2, 3, 4, 5),
y = c(1, 3, 2, 3, 1),
mode = "lines+markers",
name = "'linear'",
line = list(shape = "linear"),
type = "scatter"
)
trace1
trace2 <- list(
x = c(1, 2, 3, 4, 5),
y = c(6, 8, 7, 8, 6),
mode = "lines+markers",
name = "'spline'",
text = c("tweak line smoothness<br>with 'smoothing' in line object", "tweak line smoothness<br>with 'smoothing' in line object", "tweak line smoothness<br>with 'smoothing' in line object", "tweak line smoothness<br>with 'smoothing' in line object", "tweak line smoothness<br>with 'smoothing' in line object", "tweak line smoothness<br>with 'smoothing' in line object"),
line = list(shape = "spline"),
type = "scatter"
)
trace3 <- list(
x = c(1, 2, 3, 4, 5),
y = c(11, 13, 12, 13, 11),
mode = "lines+markers",
name = "'vhv'",
line = list(shape = "vhv"),
type = "scatter"
)
trace4 <- list(
x = c(1, 2, 3, 4, 5),
y = c(16, 18, 17, 18, 16),
mode = "lines+markers",
name = "'hvh'",
line = list(shape = "hvh"),
type = "scatter"
)
trace5 <- list(
x = c(1, 2, 3, 4, 5),
y = c(21, 23, 22, 23, 21),
mode = "lines+markers",
name = "'vh'",
line = list(shape = "vh"),
type = "scatter"
)
trace6 <- list(
x = c(1, 2, 3, 4, 5),
y = c(26, 28, 27, 28, 26),
mode = "lines+markers",
name = "'hv'",
line = list(shape = "hv"),
type = "scatter"
)
data <- list(trace1, trace2, trace3, trace4, trace5, trace6)
daa
data
layout <- list(legend = list(
y = 0.5,
traceorder = "reversed",
font = list(size = 16),
yref = "paper"
))
response <- p$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
p <- plotly(username='ivanliu1989', key='clouds123')
response <- p$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
set_credentials_file("ivanliu1989", "i4quiodbde")
response <- p$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
py <- plotly()
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
r <- py$ggplotly(ggiris)
r$response$url
trace0 <- list(
x = c(1, 2, 3, 4),
y = c(10, 15, 13, 17)
)
trace1 <- list(
x = c(1, 2, 3, 4),
y = c(16, 5, 11, 9)
)
response <- py$plotly(trace0, trace1, kwargs=list(filename="basic-line", fileopt="overwrite"))
response$url
response <- py$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
url <- response$url
filename <- response$filename
url
filename
response$url
py$response$url
py$response
install.packages(c("car", "effects", "multcomp", "NLP", "party", "robCompositions", "XLConnect", "XLConnectJars"))
shiny::runApp('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/shiny_app_pricing_management')
shinyapps::setAccountInfo(name='ivanliu1989', token='1E877F87A6C2DCCF5DE964D73F4875BE', secret='9srUXMP3o8jChzSaz9gMofZsoFn6a4HgxExyKyb1')
require(shinyapps)
deployApp()
data <- iris[,c(1,2,5)]
data(iris)
data <- iris[,c(1,2,5)]
data$Species <- factor(ifelse(data$Speices == 'setosa','rare','common'))
data$Species <- factor(ifelse(data$Species == 'setosa','rare','common'))
newData <- SMOTE(Species~.,data,perc.over=600)
require(DMwR)
data$Species
newData <- SMOTE(Species~.,data,perc.over=600)
table(newData$Species)
table(data$Species)
dim(iris)
name(iris)
names(iris)
str(iris)
attribute(iris)
attributes(iris)
iris[1:5,]
iris[1:10,3]
iris[1:10,1]
iris[,1][1:10]
summary(iris)
table(iris[,1])
table(iris[,5])
pie(table(iris[,5]))
var(iris[,1])
cov(iris[,1],iris[,3])
cor(iris[,1],iris[,3])
hist(iris[,1])
plot(density(iris[,3]))
plot(density(iris[,1]))
plot(iris[,1],iris[,3])
plot(iris[,1],iris[,2])
plot(iris)
pairs(iris)
library(party)
str(iris)
iris_ctree <- ctree(Species ~. , data=iris)
print(iris_ctree)
plot(iris_ctree)
plot(iris_ctree, type='simple')
png('decision_tree_1.png')
plot(iris_ctree)
dev.off()
png('decision_tree_2.png')
plot(iris_ctree, type='simple')
dev.off()
?ctree
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris,3))
table(iris$Species, kc($cluster)
table(iris$Species, kc$cluster)
plot(newiris[c('Sepal.Length','Sepal.Width')], col=kc$cluster)
points(kc$centers[,c('Sepal.Length','Sepal.Width')],col=1:3,pch=8,cex=2)
png('kmeans.png')
plot(newiris[c('Sepal.Length','Sepal.Width')], col=kc$cluster)
points(kc$centers[,c('Sepal.Length','Sepal.Width')],col=1:3,pch=8,cex=2)
dev.off()
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
ind
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
table(predict(iris_ctree), trainData$Species)
print(iris_ctree)
plot(iris_ctree)
plot(iris_ctree, type="simple")
testPred <- predict(iris_ctree, newdata = testData)
table(testPred, testData$Species)
# by rpart
data("bodyfat", package = "mboost")
require(mboost)
data("bodyfat", package = "mboost")
dim(bodyfat)
set.seed(1234)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
library(rpart)
iris_rpart <- rpart(myFormula, data = trainData,
+ control = rpart.control(minsplit = 10))
iris_rpart <- rpart(myFormula, data = trainData,control = rpart.control(minsplit = 10))
attributes(iris_rpart)
named list()
print(iris_rpart$cptable)
print(iris_rpart)
plot(iris_rpart)
text(iris_rpart, use.n=T)
opt <- which.min(iris_rpart$cptable[,"xerror"])
iris_prune <- prune(iris_rpart, cp = cp)
cp <- iris_rpart$cptable[opt, "CP"]
iris_prune <- prune(iris_rpart, cp = cp)
print(iris_prune)
plot(bodyfat_prune)
plot(iris_prune)
text(iris_prune, use.n=T)
iris_pred <- predict(iris_prune, newdata=testData)
iris_pred <- predict(iris_prune, newdata=testData)
plot(iris_pred ~ ., data=testData, xlab="Observed",
+ ylab="Predicted", ylim=xlim, xlim=xlim)
plot(iris_pred ~ ., data=testData, xlab="Observed",ylab="Predicted", ylim=xlim, xlim=xlim)
xlim <- range(iris[,1])
plot(iris_pred ~ ., data=testData, xlab="Observed",ylab="Predicted", ylim=xlim, xlim=xlim)
iris_pred
testData
plot(iris_pred ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=testData, xlab="Observed",ylab="Predicted", ylim=xlim, xlim=xlim)
iris_pred <- predict(iris_prune, newdata=testData)
plot(iris_pred ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=testData, xlab="Observed",ylab="Predicted")
abline(a=0, b=1)
iris_pred <- predict(iris_prune, newdata=testData)
iris_pred
plot(iris_pred[,1] ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=testData, xlab="Observed",ylab="Predicted")
plot(iris_pred[,1] ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=testData, xlab="Observed",ylab="Predicted")
abline(a=0, b=1)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
library(randomForest)
rf <- randomForest(Species ~ ., data=trainData, ntree=100, proximity=TRUE)
table(predict(rf), trainData$Species)
print(rf)
attributes(rf)
plot(rf)
png('random_forest.png')
plot(rf)
dev.off()
importance(rf)
varImpPlot(rf)
irisPred <- predict(rf, newdata=testData)
table(irisPred, testData$Species)
plot(margin(rf, testData$Species))
png('random_forest_2.png')
plot(margin(rf, testData$Species))
dev.off()
function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE,
library(fpc)
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\ata_Mining_Work_Space\\rdatamining')
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\ata_Mining_Work_Space\\rdatamining')
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
library(fpc)
pamk.result <- pamk(iris2)
iris2 <-iris
iris2$Species <- NULL
pamk.result <- pamk(iris2)
pamk.result$nc
?pamk
table(pamk.result$pamobject$clustering, iris$Species)
layout(matrix(c(1,2),1,2)) # 2 graphs per page
plot(pamk.result$pamobject)
layout(matrix(1)) # change back to one graph per page
layout(matrix(c(1,2),1,2)) # 2 graphs per page
png('k-medoids.png')
plot(pamk.result$pamobject)
dev.off()
layout(matrix(1)) # change back to one graph per page
pam.result <- pam(iris2, 3)
table(pam.result$clustering, iris$Species)
layout(matrix(c(1,2),1,2)) # 2 graphs per page
plot(pam.result)
layout(matrix(1)) # change back to one graph per page
png('k-medoids-2.png')
plot(pam.result)
dev.off()
layout(matrix(1)) # change back to one graph per page
layout(matrix(c(1,2),1,2)) # 2 graphs per page
png('k-medoids-2.png')
plot(pam.result)
dev.off()
layout(matrix(1)) # change back to one graph per page
idx <- sample(1:dim(iris)[1], 40)
idx
irisSample <- iris[idx,]
irisSample$Species <- NULL
hc <- hclust(dist(irisSample), method="ave")
plot(hc, hang = -1, labels=iris$Species[idx])
# cut tree into 3 clusters
rect.hclust(hc, k=3)
groups <- cutree(hc, k=3)
png('hierarchical-clustering.png')
plot(hc, hang = -1, labels=iris$Species[idx])
# cut tree into 3 clusters
rect.hclust(hc, k=3)
dev.off()
library(fpc)
iris2 <- iris[-5] # remove class tags
ds <- dbscan(iris2, eps=0.42, MinPts=5)
table(ds$cluster, iris$Species)
plot(ds, iris2)
plot(ds, iris2[c(1,4)])
plotcluster(iris2,
plotcluster(iris2,ds$cluster)
plotcluster(iris2,ds$cluster)
set.seed(435)
idx <- sample(1:nrow(iris), 10)
newData <- iris[idx,-5]
newData <- newData + matrix(runif(10*4, min=0, max=0.2), nrow=10, ncol=4)
newData
myPred <- predict(ds, iris2, newData)
plot(iris2[c(1,4)], col=1+ds$cluster)
points(newData[c(1,4)], pch="*", col=1+myPred, cex=3)
table(myPred, iris$Species[idx])
png('density-based-clustering.png')
plot(ds, iris2)
dev.off()
year <- rep(2008:2010, each=4)
quarter <- rep(1:4, 3)
cpi <- c(162.2, 164.6, 166.5, 166.0,166.2, 167.0, 168.6, 169.5,171.0, 172.1, 173.3, 174.0)
plot(cpi, xaxt="n", ylab="CPI", xlab="")
# draw x-axis
axis(1, labels=paste(year,quarter,sep="Q"), at=1:12, las=3)
cor(year,cpi)
cor(quarter,cpi)
fit <- lm(cpi ~ year + quarter)
fit
(cpi2011 <- fit$coefficients[[1]] + fit$coefficients[[2]]*2011 + fit$coefficients[[3]]*(1:4))
attributes(fit)
fit$coefficients
residuals(fit)
summary(fit)
plot(fit)
library(scatterplot3d)
s3d <- scatterplot3d(year, quarter, cpi, highlight.3d=T, type="h", lab=c(2,3))
s3d$plane3d(fit)
png('lr_2.png')
s3d <- scatterplot3d(year, quarter, cpi, highlight.3d=T, type="h", lab=c(2,3))
s3d$plane3d(fit)
dev.off()
par(mfcol =c(2,2))
png('lr_2.png')
plot(fit)
dev.off()
par(mfcol =c(2,2))
png('lr_1.png')
plot(fit)
dev.off()
library(scatterplot3d)
png('lr_2.png')
s3d <- scatterplot3d(year, quarter, cpi, highlight.3d=T, type="h", lab=c(2,3))
s3d$plane3d(fit)
dev.off()
par(mfcol =c(2,2))
plot(fit)
png('lr_1.png')
par(mfcol =c(2,2))
plot(fit)
dev.off()
data2011 <- data.frame(year=2011, quarter=1:4)
cpi2011 <- predict(fit, newdata=data2011)
style <- c(rep(1,12), rep(2,4))
plot(c(cpi, cpi2011), xaxt="n", ylab="CPI", xlab="", pch=style, col=style)
axis(1, at=1:16, las=3,labels=c(paste(year,quarter,sep="Q"), "2011Q1", "2011Q2", "2011Q3", "2011Q4"))
par(mfcol =c(1))
par(mfcol =c(1,1))
data2011 <- data.frame(year=2011, quarter=1:4)
cpi2011 <- predict(fit, newdata=data2011)
style <- c(rep(1,12), rep(2,4))
plot(c(cpi, cpi2011), xaxt="n", ylab="CPI", xlab="", pch=style, col=style)
axis(1, at=1:16, las=3,labels=c(paste(year,quarter,sep="Q"), "2011Q1", "2011Q2", "2011Q3", "2011Q4"))
