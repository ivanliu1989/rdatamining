font = list(size = 16),
yref = "paper"
))
response <- p$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
p <- plotly(username='ivanliu1989', key='clouds123')
response <- p$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
set_credentials_file("ivanliu1989", "i4quiodbde")
response <- p$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
py <- plotly()
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
r <- py$ggplotly(ggiris)
r$response$url
trace0 <- list(
x = c(1, 2, 3, 4),
y = c(10, 15, 13, 17)
)
trace1 <- list(
x = c(1, 2, 3, 4),
y = c(16, 5, 11, 9)
)
response <- py$plotly(trace0, trace1, kwargs=list(filename="basic-line", fileopt="overwrite"))
response$url
response <- py$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
url <- response$url
filename <- response$filename
url
filename
response$url
py$response$url
py$response
install.packages(c("car", "effects", "multcomp", "NLP", "party", "robCompositions", "XLConnect", "XLConnectJars"))
shiny::runApp('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/shiny_app_pricing_management')
shinyapps::setAccountInfo(name='ivanliu1989', token='1E877F87A6C2DCCF5DE964D73F4875BE', secret='9srUXMP3o8jChzSaz9gMofZsoFn6a4HgxExyKyb1')
require(shinyapps)
deployApp()
data <- iris[,c(1,2,5)]
data(iris)
data <- iris[,c(1,2,5)]
data$Species <- factor(ifelse(data$Speices == 'setosa','rare','common'))
data$Species <- factor(ifelse(data$Species == 'setosa','rare','common'))
newData <- SMOTE(Species~.,data,perc.over=600)
require(DMwR)
data$Species
newData <- SMOTE(Species~.,data,perc.over=600)
table(newData$Species)
table(data$Species)
dim(iris)
name(iris)
names(iris)
str(iris)
attribute(iris)
attributes(iris)
iris[1:5,]
iris[1:10,3]
iris[1:10,1]
iris[,1][1:10]
summary(iris)
table(iris[,1])
table(iris[,5])
pie(table(iris[,5]))
var(iris[,1])
cov(iris[,1],iris[,3])
cor(iris[,1],iris[,3])
hist(iris[,1])
plot(density(iris[,3]))
plot(density(iris[,1]))
plot(iris[,1],iris[,3])
plot(iris[,1],iris[,2])
plot(iris)
pairs(iris)
library(party)
str(iris)
iris_ctree <- ctree(Species ~. , data=iris)
print(iris_ctree)
plot(iris_ctree)
plot(iris_ctree, type='simple')
png('decision_tree_1.png')
plot(iris_ctree)
dev.off()
png('decision_tree_2.png')
plot(iris_ctree, type='simple')
dev.off()
?ctree
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris,3))
table(iris$Species, kc($cluster)
table(iris$Species, kc$cluster)
plot(newiris[c('Sepal.Length','Sepal.Width')], col=kc$cluster)
points(kc$centers[,c('Sepal.Length','Sepal.Width')],col=1:3,pch=8,cex=2)
png('kmeans.png')
plot(newiris[c('Sepal.Length','Sepal.Width')], col=kc$cluster)
points(kc$centers[,c('Sepal.Length','Sepal.Width')],col=1:3,pch=8,cex=2)
dev.off()
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
ind
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
table(predict(iris_ctree), trainData$Species)
print(iris_ctree)
plot(iris_ctree)
plot(iris_ctree, type="simple")
testPred <- predict(iris_ctree, newdata = testData)
table(testPred, testData$Species)
# by rpart
data("bodyfat", package = "mboost")
require(mboost)
data("bodyfat", package = "mboost")
dim(bodyfat)
set.seed(1234)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
library(rpart)
iris_rpart <- rpart(myFormula, data = trainData,
+ control = rpart.control(minsplit = 10))
iris_rpart <- rpart(myFormula, data = trainData,control = rpart.control(minsplit = 10))
attributes(iris_rpart)
named list()
print(iris_rpart$cptable)
print(iris_rpart)
plot(iris_rpart)
text(iris_rpart, use.n=T)
opt <- which.min(iris_rpart$cptable[,"xerror"])
iris_prune <- prune(iris_rpart, cp = cp)
cp <- iris_rpart$cptable[opt, "CP"]
iris_prune <- prune(iris_rpart, cp = cp)
print(iris_prune)
plot(bodyfat_prune)
plot(iris_prune)
text(iris_prune, use.n=T)
iris_pred <- predict(iris_prune, newdata=testData)
iris_pred <- predict(iris_prune, newdata=testData)
plot(iris_pred ~ ., data=testData, xlab="Observed",
+ ylab="Predicted", ylim=xlim, xlim=xlim)
plot(iris_pred ~ ., data=testData, xlab="Observed",ylab="Predicted", ylim=xlim, xlim=xlim)
xlim <- range(iris[,1])
plot(iris_pred ~ ., data=testData, xlab="Observed",ylab="Predicted", ylim=xlim, xlim=xlim)
iris_pred
testData
plot(iris_pred ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=testData, xlab="Observed",ylab="Predicted", ylim=xlim, xlim=xlim)
iris_pred <- predict(iris_prune, newdata=testData)
plot(iris_pred ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=testData, xlab="Observed",ylab="Predicted")
abline(a=0, b=1)
iris_pred <- predict(iris_prune, newdata=testData)
iris_pred
plot(iris_pred[,1] ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=testData, xlab="Observed",ylab="Predicted")
plot(iris_pred[,1] ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=testData, xlab="Observed",ylab="Predicted")
abline(a=0, b=1)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
library(randomForest)
rf <- randomForest(Species ~ ., data=trainData, ntree=100, proximity=TRUE)
table(predict(rf), trainData$Species)
print(rf)
attributes(rf)
plot(rf)
png('random_forest.png')
plot(rf)
dev.off()
importance(rf)
varImpPlot(rf)
irisPred <- predict(rf, newdata=testData)
table(irisPred, testData$Species)
plot(margin(rf, testData$Species))
png('random_forest_2.png')
plot(margin(rf, testData$Species))
dev.off()
function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE,
library(fpc)
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\ata_Mining_Work_Space\\rdatamining')
set.seed(3147)
x <- rnorm(100)
summary(x)
boxplot.stats(x)$out
boxplot(x)
y <- rnorm(100)
df <- data.frame(x, y)
rm(x, y)
head(df)
attach(df)
(a <- which(x %in% boxplot.stats(x)$out))
(b <- which(y %in% boxplot.stats(y)$out))
detach(df)
(outlier.list1 <- intersect(a,b))
plot(df)
points(df[outlier.list1,], col="red", pch="+", cex=2.5)
plot(df)
points(df[outlier.list2,], col="blue", pch="x", cex=2)
(outlier.list2 <- union(a,b))
plot(df)
points(df[outlier.list2,], col="blue", pch="x", cex=2)
par(mfcol=c(1,2))
(outlier.list1 <- intersect(a,b))
plot(df)
points(df[outlier.list1,], col="red", pch="+", cex=2.5)
(outlier.list2 <- union(a,b))
plot(df)
points(df[outlier.list2,], col="blue", pch="x", cex=2)
# outliers in both x and y
png('outlier-boxplot-stats.png')
par(mfcol=c(1,2))
(outlier.list1 <- intersect(a,b))
plot(df)
points(df[outlier.list1,], col="red", pch="+", cex=2.5)
(outlier.list2 <- union(a,b))
plot(df)
points(df[outlier.list2,], col="blue", pch="x", cex=2)
dev.off()
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
library(DMwR)
# remove "Species", which is a categorical column
iris2 <- iris[,1:4]
outlier.scores <- lofactor(iris2, k=5)
plot(density(outlier.scores))
# pick top 5 as outliers
outliers <- order(outlier.scores, decreasing=T)[1:5]
# who are outliers
print(outliers)
print(iris2[outliers,])
n <- nrow(iris2)
labels <- 1:n
labels[-outliers] <- "."
biplot(prcomp(iris2), cex=.8, xlabs=labels)
pch <- rep(".", n)
pch[outliers] <- "+"
col <- rep("black", n)
col[outliers] <- "red"
pairs(iris2, pch=pch, col=col)
library(Rlof)
install.packages('Rlof')
library(Rlof)
outlier.scores <- lof(iris2, k=5)
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
iris2 <- iris[,1:4]
kmeans.result <- kmeans(iris2, centers=3)
kmeans.result$centers
kmeans.result$cluster
centers <- kmeans.result$centers[kmeans.result$cluster, ]
centers
distances <- sqrt(rowSums((iris2 - centers)^2))
outliers <- order(distances, decreasing=T)[1:5]
print(outliers)
print(iris2[outliers,])
png('Outlier-Clustering.png')
par(mfcol=c(3,1))
# plot clusters
plot(iris2[,c("Sepal.Length", "Sepal.Width")], pch="o",col=kmeans.result$cluster, cex=0.3)
# plot cluster centers
points(kmeans.result$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3,pch=8, cex=1.5)
# plot outliers
points(iris2[outliers, c("Sepal.Length", "Sepal.Width")], pch="+", col=4, cex=1.5)
dev.off()
plot(iris2[,c("Sepal.Length", "Sepal.Width")], pch="o",col=kmeans.result$cluster, cex=0.3)
points(kmeans.result$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3,pch=8, cex=1.5)
points(iris2[outliers, c("Sepal.Length", "Sepal.Width")], pch="+", col=4, cex=1.5)
png('Outlier-Clustering.png')
par(mfcol=c(1,1))
# plot clusters
plot(iris2[,c("Sepal.Length", "Sepal.Width")], pch="o",col=kmeans.result$cluster, cex=0.3)
# plot cluster centers
points(kmeans.result$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3,pch=8, cex=1.5)
# plot outliers
points(iris2[outliers, c("Sepal.Length", "Sepal.Width")], pch="+", col=4, cex=1.5)
dev.off()
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
f <- stl(AirPassengers, "periodic", robust=TRUE)
f
AirPassengers
(outliers <- which(f$weights<1e-8))
op <- par(mar=c(0, 4, 0, 3), oma=c(5, 0, 4, 0), mfcol=c(4, 1))
plot(f, set.pars=NULL)
sts <- f$time.series
sts
points(time(sts)[outliers], 0.8*sts[,"remainder"][outliers], pch="x", col="red")
par(op) # reset layout
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
# use robust fitting
f <- stl(AirPassengers, "periodic", robust=TRUE)
(outliers <- which(f$weights<1e-8))
# set layout
op <- par(mar=c(0, 4, 0, 3), oma=c(5, 0, 4, 0), mfcol=c(4, 1))
plot(f, set.pars=NULL)
sts <- f$time.series
# plot outliers
png('outlier-time-series.png')
points(time(sts)[outliers], 0.8*sts[,"remainder"][outliers], pch="x", col="red")
dev.off()
par(op) # reset layout
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
# use robust fitting
f <- stl(AirPassengers, "periodic", robust=TRUE)
(outliers <- which(f$weights<1e-8))
# set layout
op <- par(mar=c(0, 4, 0, 3), oma=c(5, 0, 4, 0), mfcol=c(4, 1))
plot(f, set.pars=NULL)
sts <- f$time.series
# plot outliers
png('outlier-time-series.png')
points(time(sts)[outliers], 0.8*sts[,"remainder"][outliers], pch="x", col="red")
dev.off()
par(op) # reset layout
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
# use robust fitting
f <- stl(AirPassengers, "periodic", robust=TRUE)
(outliers <- which(f$weights<1e-8))
# set layout
op <- par(mar=c(0, 4, 0, 3), oma=c(5, 0, 4, 0), mfcol=c(4, 1))
plot(f, set.pars=NULL)
sts <- f$time.series
# plot outliers
png('outlier-time-series.png')
points(time(sts)[outliers], 0.8*sts[,"remainder"][outliers], pch="x", col="red")
dev.off()
par(op) # reset layout
points(time(sts)[outliers], 0.8*sts[,"remainder"][outliers], pch="x", col="red")
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
# use robust fitting
f <- stl(AirPassengers, "periodic", robust=TRUE)
(outliers <- which(f$weights<1e-8))
# set layout
op <- par(mar=c(0, 4, 0, 3), oma=c(5, 0, 4, 0), mfcol=c(4, 1))
png('outlier-time-series.png')
plot(f, set.pars=NULL)
sts <- f$time.series
# plot outliers
points(time(sts)[outliers], 0.8*sts[,"remainder"][outliers], pch="x", col="red")
dev.off()
par(op) # reset layout
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
# use robust fitting
f <- stl(AirPassengers, "periodic", robust=TRUE)
(outliers <- which(f$weights<1e-8))
# set layout
op <- par(mar=c(0, 4, 0, 3), oma=c(5, 0, 4, 0), mfcol=c(4, 1))
png('outlier-time-series.png')
plot(f, set.pars=NULL)
sts <- f$time.series
# plot outliers
points(time(sts)[outliers], 0.8*sts[,"remainder"][outliers], pch="x", col="red")
dev.off()
par(op) # reset layout
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
a <- ts(1:30, frequency=12, start=c(2011,3))
print(a)
str(a)
attributes(a)
plot(AirPassengers)
par(mfcol=c(1,1))
plot(AirPassengers)
apts <- ts(AirPassengers, frequency=12)
apts
AirPassengers
f <- decompose(apts)
f
f$figure
plot(f$figure, type="b", xaxt="n", xlab="")
monthNames <- months(ISOdate(2011,1:12,1))
monthNames
axis(1, at=1:12, labels=monthNames, las=2)
plot(f)
fit <- arima(AirPassengers, order=c(1,0,0), list(order=c(2,1,0), period=12))
fit
fore <- predict(fit, n.ahead=24)
U <- fore$pred + 2*fore$se
L <- fore$pred - 2*fore$se
ts.plot(AirPassengers, fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)"), col=c(1,2,4), lty=c(1,1,2))
png('ts_forecasting.png')
ts.plot(AirPassengers, fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)"), col=c(1,2,4), lty=c(1,1,2))
dev.off()
library(dtw)
idx <- seq(0, 2*pi, len=100)
a <- sin(idx) + runif(100)/10
b <- cos(idx)
align <- dtw(a, b, step=asymmetricP1, keep=T)
dtwPlotTwoWay(align)
install.packages('dtw')
library(dtw)
idx <- seq(0, 2*pi, len=100)
a <- sin(idx) + runif(100)/10
b <- cos(idx)
align <- dtw(a, b, step=asymmetricP1, keep=T)
dtwPlotTwoWay(align)
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
library(dtw)
idx <- seq(0, 2*pi, len=100)
a <- sin(idx) + runif(100)/10
b <- cos(idx)
align <- dtw(a, b, step=asymmetricP1, keep=T)
png('ts-clustering.png')
dtwPlotTwoWay(align)
dev.off()
idx
a
b
align
set.seed(6218)
n <- 10
s <- sample(1:100, n)
s
idx <- c(s, 100+s, 200+s, 300+s, 400+s, 500+s)
idx
sample2 <- sc[idx,]
sample2
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\rdatamining')
gc()
str(Titanic)
df <- as.data.frame(Titanic)
head(df)
titanic.raw <- NULL
titanic.raw
for(i in 1:4) {
titanic.raw <- cbind(titanic.raw, rep(as.character(df[,i]), df$Freq))
}
titanic.raw
head(df)
titanic.raw <- as.data.frame(titanic.raw)
names(titanic.raw) <- names(df)[1:4]
dim(titanic.raw)
str(titanic.raw)
head(titanic.raw)
summary(titanic.raw)
# Association Rule Mining
library(arules)
install.packages('arules')
library(arules)
# find association rules with default settings
rules.all <- apriori(titanic.raw)
rules.all <- apriori(titanic.raw)
rules.all <- apriori(titanic.raw)
rules.all
rules.all
inspect(rules.all)
rules <- apriori(titanic.raw, control = list(verbose=F),
parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No", "Survived=Yes"),
default="lhs"))
quality(rules) <- round(quality(rules), digits=3)
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
quality(rules) <- round(quality(rules), digits=3)
quality(rules)
rules.sorted
inspect(rules.sorted)
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
subset.matrix
redundant <- colSums(subset.matrix, na.rm=T) >= 1
redundant
which(redundant)
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
rules <- apriori(titanic.raw,parameter = list(minlen=3, supp=0.002, conf=0.2),
appearance = list(rhs=c("Survived=Yes"),
lhs=c("Class=1st", "Class=2nd", "Class=3rd","Age=Child", "Age=Adult"),
default="none"),control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
# Visualizing Association Rules
library(arulesViz)
install.packages('arulesViz')
library(arulesViz)
plot(rules.all)
png('association_rules_1.png')
plot(rules.all)
dev.off()
png('association_rules_2.png')
plot(rules.all, method="grouped")dev.off()
png('association_rules_2.png')
plot(rules.all, method="grouped")
dev.off()
plot(rules.all, method="grouped")
png('association_rules_3.png')
plot(rules.all, method="graph")
dev.off()
plot(rules.all, method="graph")
png('association_rules_4.png')
plot(rules.all, method="graph", control=list(type="items"))
dev.off()
plot(rules.all, method="graph", control=list(type="items"))
plot(rules.all, method="paracoord", control=list(reorder=TRUE))dev.off()
png('association_rules_5.png')
plot(rules.all, method="paracoord", control=list(reorder=TRUE))
dev.off()
plot(rules.all, method="paracoord", control=list(reorder=TRUE))
source(“http://biostat.jhsph.edu/~jleek/code/twitterMap.R”)
source("http://biostat.jhsph.edu/~jleek/code/twitterMap.R")
install.packages('geosphere')
install.packages("geosphere")
source("http://biostat.jhsph.edu/~jleek/code/twitterMap.R")
twitterMap("RDataMining", fileName="twitterMap.pdf", nMax=1500)
library(twitteR)
setup_twitter_oauth("NP4pbVLgnqvhhSyt4qxhVtgn6", "gZcHVf3ubTQqnlKzg8V6mVGtL3NRiyppZSodKy3mAkp1byaOIQ")
library(twitteR)
setup_twitter_oauth("NP4pbVLgnqvhhSyt4qxhVtgn6", "gZcHVf3ubTQqnlKzg8V6mVGtL3NRiyppZSodKy3mAkp1byaOIQ")
getTwitterOAuth("NP4pbVLgnqvhhSyt4qxhVtgn6", "gZcHVf3ubTQqnlKzg8V6mVGtL3NRiyppZSodKy3mAkp1byaOIQ")
getTwitterOAuth("NP4pbVLgnqvhhSyt4qxhVtgn6", "gZcHVf3ubTQqnlKzg8V6mVGtL3NRiyppZSodKy3mAkp1byaOIQ")
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
library(twitteR)
getTwitterOAuth("NP4pbVLgnqvhhSyt4qxhVtgn6", "gZcHVf3ubTQqnlKzg8V6mVGtL3NRiyppZSodKy3mAkp1byaOIQ")
getTwitterOAuth("NP4pbVLgnqvhhSyt4qxhVtgn6", "gZcHVf3ubTQqnlKzg8V6mVGtL3NRiyppZSodKy3mAkp1byaOIQ")
twitterMap("RDataMining", fileName="twitterMap.pdf", nMax=1500)
twitterMap("RDataMining", fileName="twitterMap.pdf", nMax=1500)
